plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.chessrating'
archivesBaseName = 'chessRating'
def libFolder = new File("${projectDir}/lib")
def buildFolder = new File("${projectDir}/build")
def buildLibFolder = new File("${buildFolder}/lib")

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation group: 'org.keycloak', name: 'keycloak-spring-boot-starter', version: '21.0.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyLibs {
	configurations.implementation.setCanBeResolved(true)
	configurations.testImplementation.setCanBeResolved(true)
	doLast {
		if (!libFolder.exists()) {
			libFolder.mkdirs()
		}
		copy {
			from configurations.implementation, configurations.testImplementation
			into 'lib'
		}
	}
}

task copyToBuild {
	doLast {
		if (!buildFolder.exists()) {
			buildFolder.mkdirs()
		}

		if (!buildLibFolder.exists()) {
			buildLibFolder.mkdirs()
		}

		copy {
			from libFolder
			include '*.jar'
			into buildLibFolder
		}
	}
}

jar {
	destinationDirectory.set(file(buildFolder))
	archiveFileName.set("${archivesBaseName}.jar")

	manifest {
		attributes(
				'Gradle-Version': gradle.gradleVersion,
				'Created-By': "${System.properties['java.runtime.version']} (${System.properties['java.vendor']})",
				'Class-Path': configurations.runtimeClasspath.files.collect { "lib/${it.getName()}" }.join(' '),
				'Main-Class': 'com.chessrating.ChessRatingApplication'
		)
	}
}

build {
	dependsOn 'copyLibs'
	dependsOn 'compileJava'
	dependsOn 'copyToBuild'
	dependsOn 'jar'
	tasks.findByName('compileJava').dependsOn 'copyLibs'
	tasks.findByName('copyToBuild').dependsOn 'compileJava'
	tasks.findByName('jar').dependsOn 'copyToBuild'
}
