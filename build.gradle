plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.chessrating'
//version = '0.0.1-SNAPSHOT'
archivesBaseName = 'chessRating'
def libFolder = new File("${projectDir}/lib")
def buildFolder = new File("${projectDir}/build")
def buildLibFolder = new File("${buildFolder}/lib")

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'

	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.6.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

task copyLibs {
	configurations.implementation.setCanBeResolved(true)
	configurations.testImplementation.setCanBeResolved(true)
	doLast {
		if (!libFolder.exists()) {
			libFolder.mkdirs()
		}
		copy {
			from configurations.implementation, configurations.testImplementation
			into 'lib'
		}
	}
}

task copyToBuild {
	doLast {
		if (!buildFolder.exists()) {
			buildFolder.mkdirs()
		}
//		copy {
//			from '.'
//			include '*.xml'
//			include '*.json'
//			include '*.conf'
//			into buildFolder
//		}

//		if (!distResourcesFolder.exists()) {
//			distResourcesFolder.mkdirs()
//		}

		if (!buildLibFolder.exists()) {
			buildLibFolder.mkdirs()
		}

//		copy {
//			from resourceFolder
//			into distResourcesFolder
//		}

//		copy {
//			from testResourceFolder
//			into distResourcesFolder
//		}

		copy {
			from libFolder
			include '*.jar'
			into buildLibFolder
		}
	}
}

jar {
	destinationDirectory.set(file(buildFolder))
	archiveFileName.set("${archivesBaseName}.jar")
//	from('.') {
//		include 'log4j2.xml'
//	}
//	from(testResourceFolder) {
//		include '**/*'
//	}

	manifest {
		attributes(
				'Gradle-Version': gradle.gradleVersion,
				'Created-By': "${System.properties['java.runtime.version']} (${System.properties['java.vendor']})",
				'Class-Path': configurations.runtimeClasspath.files.collect { "lib/${it.getName()}" }.join(' '),
				'Main-Class': 'com.chessrating.ChessRatingApplication'
		)
	}
}

//test {
//	maxHeapSize = '1G'
//	testLogging {
//		events "PASSED", "SKIPPED", "FAILED"
//		exceptionFormat "full"
//		showExceptions true
//		showCauses true
//		showStackTraces true
//	}
//}

build {
	dependsOn 'copyLibs'
	dependsOn 'compileJava'
	dependsOn 'copyToBuild'
//	dependsOn 'test'
	dependsOn 'jar'
	tasks.findByName('compileJava').dependsOn 'copyLibs'
	tasks.findByName('copyToBuild').dependsOn 'compileJava'
//	tasks.findByName('test').dependsOn 'copyToDist'
	tasks.findByName('jar').dependsOn 'copyToBuild'
}
